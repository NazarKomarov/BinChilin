package com.example.bingo;

import javafx.fxml.FXML;
import javafx.geometry.Insets;
import javafx.geometry.Pos;
import javafx.scene.Scene;
import javafx.scene.control.*;
import javafx.scene.layout.*;
import javafx.stage.Stage;

import java.util.*;

public class BingoController {

    @FXML
    private GridPane gridPane;

    // –ü–æ–ª–µ –¥–ª—è –∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è –æ—Å–Ω–æ–≤–Ω–æ—ó —Å—Ü–µ–Ω–∏
    private Scene mainScene;

    // –ü–æ–ª–µ –¥–ª—è –∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è –≥–æ–ª–æ–≤–Ω–æ–≥–æ –≤—ñ–∫–Ω–∞ (Stage)
    private Stage mainStage;

    private final List<String> allEvents = getAllEvents();
    private final List<Event> roundEvents = new ArrayList<>();
    private int score = 0;
    private final int WINNING_SCORE = 12;

    @FXML
    public void initialize() {
        prepareNewRound();
        renderGrid();
    }

    private void prepareNewRound() {
        score = 0;
        roundEvents.clear();
        Collections.shuffle(allEvents);
        for (int i = 0; i < 24 && i < allEvents.size(); i++) {
            roundEvents.add(new Event(allEvents.get(i)));
        }
    }

    private void renderGrid() {
        try {
            if (gridPane == null) {
                System.err.println("--- renderGrid: –ü–æ–º–∏–ª–∫–∞ - gridPane is null! ---");
                return;
            }
            gridPane.getChildren().clear();
            int cols = 8;

            for (int i = 0; i < roundEvents.size(); i++) {
                int row = i / cols;
                int col = i % cols;
                Event currentEvent = roundEvents.get(i);
                if (currentEvent == null) {
                    System.err.println("--- renderGrid: –ü–æ–º–∏–ª–∫–∞ - Event null –≤ —ñ–Ω–¥–µ–∫—Å—ñ " + i + " ---");
                    continue;
                }

                Button btn = new Button(String.valueOf(i + 1));
                btn.setPrefSize(100, 60);
                if (currentEvent.getDescription() != null) {
                    btn.setTooltip(new Tooltip(currentEvent.getDescription()));
                }

                if (currentEvent.isMarked()) {
                    btn.setStyle("-fx-base: lightgreen;");
                } else {
                    btn.setStyle("");
                }

                int eventIndex = i;
                btn.setOnAction(e -> showEventDetails(eventIndex));
                gridPane.add(btn, col, row);
            }
        } catch (Exception e) {
            System.err.println("--- renderGrid: !!! –ü–û–ô–ú–ê–ù–ê –û–®–ò–ë–ö–ê –í–ù–£–¢–†–ò renderGrid !!! ---");
            e.printStackTrace();
        }
    }

    // –ú–µ—Ç–æ–¥ –ø–æ–∫–∞–∑—É –¥–µ—Ç–∞–ª–µ–π —ñ–≤–µ–Ω—Ç—É
    private void showEventDetails(int index) {
        // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –æ—Å–Ω–æ–≤–Ω—É —Å—Ü–µ–Ω—É –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–Ω—è–º
        if (mainScene == null) {
            mainScene = gridPane.getScene();
            if (mainScene == null) {
                System.err.println("–ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞: –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –ø–æ—Ç–æ—á–Ω—É —Å—Ü–µ–Ω—É!");
                return;
            }
        }

        // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ Stage, —è–∫—â–æ –µ—â–µ –Ω–µ –∑—Ä–æ–±–∏–ª–∏ —Ü—å–æ–≥–æ
        if (mainStage == null) {
            mainStage = (Stage) mainScene.getWindow(); // –û—Ç—Ä–∏–º–∞—î–º–æ –∑ –ø–æ—Ç–æ—á–Ω–æ—ó —Å—Ü–µ–Ω–∏
            if (mainStage == null) {
                System.err.println("–ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞: –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ Stage!");
                return;
            }
        }

        Event event = roundEvents.get(index);

        Label label = new Label(event.getDescription());
        label.setWrapText(true);
        label.setStyle("-fx-font-size: 16px; -fx-text-alignment: center;");
        label.setMaxWidth(Double.MAX_VALUE);

        Button backBtn = new Button("–ù–∞–∑–∞–¥");
        CheckBox checkBox = new CheckBox("–í–∏–∫–æ–Ω–∞–Ω–æ");
        checkBox.setSelected(event.isMarked());

        checkBox.setOnAction(e -> {
            boolean wasMarked = event.isMarked();
            boolean isMarked = checkBox.isSelected();
            event.setMarked(isMarked);
            if (isMarked && !wasMarked) score++;
            else if (!isMarked && wasMarked) score--;
            checkVictory();
        });

        backBtn.setOnAction(e -> renderGridScene());

        HBox controls = new HBox(20, backBtn, checkBox);
        controls.setAlignment(Pos.CENTER);

        BorderPane detailPane = new BorderPane();
        detailPane.setCenter(label);
        detailPane.setBottom(controls);
        BorderPane.setAlignment(label, Pos.CENTER);
        BorderPane.setMargin(controls, new Insets(20, 0, 20, 0));
        detailPane.setPadding(new Insets(20));

        // –°—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤—É —Å—Ü–µ–Ω—É –¥–ª—è –¥–µ—Ç–∞–ª–µ–π, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—á–∏ —Ä–æ–∑–º—ñ—Ä–∏ –≤—ñ–∫–Ω–∞ –∑ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω–æ–≥–æ Stage
        Scene detailScene = new Scene(detailPane, mainStage.getWidth(), mainStage.getHeight());

        // –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –Ω–æ–≤—É—é —Å—Ü–µ–Ω—É (–¥–µ—Ç–∞–ª—ñ) –Ω–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–∏–π Stage
        mainStage.setScene(detailScene);
    }

    // –ú–µ—Ç–æ–¥ –¥–ª—è –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –¥–æ –æ—Å–Ω–æ–≤–Ω–æ—Ö —Å—Ü–µ–Ω–∏ –∑ —Å—ñ—Ç–∫–æ—é
    private void renderGridScene() {
        // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –∑–±–µ—Ä–µ–∂–µ–Ω—ñ mainStage –∏ mainScene
        if (mainStage != null && mainScene != null) {
            renderGrid(); // –ü–µ—Ä–µ–º–∞–ª—å–æ–≤–∞—î–º–æ —Å—ñ—Ç–∫—É
            mainStage.setScene(mainScene); // –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –æ—Å–Ω–æ–≤–Ω—É —Å—Ü–µ–Ω—É –Ω–∞ Stage
        } else {
            System.err.println("–ü–æ–º–∏–ª–∫–∞: –ù–µ –í–¥–∞–ª–æ—Å—è –ø–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è (mainStage –∏–ª–∏ mainScene is null).");
            if(mainStage == null) System.err.println("–ü—Ä–∏—á–∏–Ω–∞: mainStage == null");
            if(mainScene == null) System.err.println("–ü—Ä–∏—á–∏–Ω–∞: mainScene == null");
        }
    }

    // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —É–º–æ–≤–∏ –ø–µ—Ä–µ–º–æ–≥–∏
    private void checkVictory() {
        if (score >= WINNING_SCORE) {
            Alert alert = new Alert(Alert.AlertType.INFORMATION);
            alert.setTitle("–ü–µ—Ä–µ–º–æ–≥–∞!");
            alert.setHeaderText(null);
            alert.setContentText("üéâ –í–∏ –≤–∏–≥—Ä–∞–ª–∏ —Ä–∞—É–Ω–¥! –ù–∞–±—Ä–∞–Ω–æ –ø–æ—ñ–Ω—Ç—ñ–≤: " + score);
            alert.showAndWait();
            prepareNewRound();
            renderGridScene();
        }
    }

    // –°–ø–∏—Å–æ–∫ –≤—Å—ñ—Ö –º–æ–∂–ª–∏–≤–∏—Ö —ñ–≤–µ–Ω—Ç—ñ–≤
    private List<String> getAllEvents() {
        // ... (—Å–ø–∏—Å–æ–∫ —ñ–≤–µ–Ω—Ç—ñ–≤) ...
        return Arrays.asList(
                "–í–∏–∫–ª–∞–¥–∞—á –∑–∞—Ö–æ–¥–∏—Ç—å —É –∞—É–¥–∏—Ç–æ—Ä—ñ—é", "–•—Ç–æ—Å—å –∑–∞–ø—ñ–∑–Ω—é—î—Ç—å—Å—è ", "–í–∏–∫–ª–∞–¥–∞—á –≤—ñ–¥–∫—Ä–∏–≤–∞—î –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü—ñ—é",
                "–•—Ç–æ—Å—å –ø–∏—Ç–∞—î, —â–æ –±—É–ª–æ –Ω–∞ –º–∏–Ω—É–ª—ñ–π –ø–∞—Ä—ñ", "–í–∏–∫–ª–∞–¥–∞—á –∫–∞–∂–µ \"—Ü–µ –≤–∞–∂–ª–∏–≤–æ\"", "–•—Ç–æ—Å—å –¥–∏–≤–∏—Ç—å—Å—è —á–∞—Å –Ω–∞ —Ç–µ–ª–µ—Ñ–æ–Ω—ñ",
                "–í–∏–∫–ª–∞–¥–∞—á –∑–∞–ø–∏—Ç—É—î, —á–∏ —î –ø–∏—Ç–∞–Ω–Ω—è.", "–í–∏–∫–ª–∞–¥–∞—á –¥–∏–≤–∏—Ç—å—Å—è –Ω–∞ –∫–æ–≥–æ—Å—å –≤ –æ—á—ñ–∫—É–≤–∞–Ω–Ω—ñ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ.",
                "–í–∏–∫–ª–∞–¥–∞—á –ø–æ–≤—Ç–æ—Ä—é—î —â–æ—Å—å –¥–≤—ñ—á—ñ.", "–í–∏–∫–ª–∞–¥–∞—á –ø–∏—à–µ –Ω–∞ –¥–æ—à—Ü—ñ",
                "–•—Ç–æ—Å—å –ø—Ä–æ—Å–∏—Ç—å –ø–æ–≤—Ç–æ—Ä–∏—Ç–∏ —Å–∫–∞–∑–∞–Ω–µ,—Ç–æ–º—É —â–æ –Ω–µ –≤—Å—Ç–∏–≥ –∑–∞–ø–∏—Å–∞—Ç–∏", "–í–∏–∫–ª–∞–¥–∞—á –∂–∞—Ä—Ç—É—î", "–í–∏–∫–ª–∞–¥–∞—á –∑–≤–µ—Ä—Ç–∞—î—Ç—å—Å—è –¥–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å—Ç—É–¥–µ–Ω—Ç–∞",
                "–í–∏–∫–ª–∞–¥–∞—á –∑–≥–∞–¥—É—î —â–æ—Å—å –∑ –º–∏–Ω—É–ª–∏—Ö —Ç–µ–º", "–•—Ç–æ—Å—å –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î –Ω–µ–≤–ø–µ–≤–Ω–µ–Ω–æ", "–í–∏–∫–ª–∞–¥–∞—á –≥–æ–≤–æ—Ä–∏—Ç—å \"—Ü–µ –±—É–¥–µ –Ω–∞ –µ–∫–∑–∞–º–µ–Ω—ñ\"",
                "–í–∏–∫–ª–∞–¥–∞—á —Ä–æ–±–∏—Ç—å –ø–∞—É–∑—É –≤ –æ—á—ñ–∫—É–≤–∞–Ω–Ω—ñ —Ç–∏—à—ñ,—É –≤—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞ –≥–∞–ª–∞—Å", "–•—Ç–æ—Å—å –ø–∏—à–µ –∫–æ–Ω—Å–ø–µ–∫—Ç", "–í–∏–∫–ª–∞–¥–∞—á –≥–æ–≤–æ—Ä–∏—Ç—å \"–º–∏ –≤–∂–µ —Ü–µ –ø—Ä–æ—Ö–æ–¥–∏–ª–∏\"",
                "–•—Ç–æ—Å—å —Ö–∏—Ç–∞—î –≥–æ–ª–æ–≤–æ—é, –Ω—ñ–±–∏ —Ä–æ–∑—É–º—ñ—î", "–í–∏–∫–ª–∞–¥–∞—á –ø—Ä–æ–≤–æ–¥–∏—Ç—å –∞–Ω–∞–ª–æ–≥—ñ—é –∑ –∂–∏—Ç—Ç—è–º", "–í–∏–∫–ª–∞–¥–∞—á –∫–∞–∂–µ, —â–æ —á–∞—Å—É –∑–∞–ª–∏—à–∏–ª–æ—Å—è –º–∞–ª–æ",
                "–í–∏–∫–ª–∞–¥–∞—á –∫–∞–∂–µ, —â–æ –º–∞—Ç–µ—Ä—ñ–∞–ª —î –≤ –ø—ñ–¥—Ä—É—á–Ω–∏–∫—É", "–í–∏–∫–ª–∞–¥–∞—á –ø—Ä–æ—Å–∏—Ç—å –∫–æ–≥–æ—Å—å –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—Ç–∏", "–í–∏–∫–ª–∞–¥–∞—á –ø—Ä–∏—Ö–æ–¥–∏—Ç—å —ñ–∑ –∑–∞–ø—ñ–∑–Ω–µ–Ω–Ω—è–º",
                "–í–∏–∫–ª–∞–¥–∞—á –≤–∏–ø–∞–¥–∫–æ–≤–æ –∫–∞–∂–µ —â–æ—Å—å —Å–º—ñ—à–Ω–µ", "–í –∞—É–¥–∏—Ç–æ—Ä—ñ—ó –≤–∏–º–∏–∫–∞—é—Ç—å —Å–≤—ñ—Ç–ª–æ/–µ–ª–µ–∫—Ç—Ä–∏–∫—É", "–•—Ç–æ—Å—å –∑–∞–ø–∏—Ç—É—î –ø—Ä–æ –µ–∫–∑–∞–º–µ–Ω", "–•—Ç–æ—Å—å –ø—ñ–¥–Ω—ñ–º–∞—î —Ä—É–∫—É –¥–ª—è –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ",
                "–í–∏–∫–ª–∞–¥–∞—á –∑–≥–∞–¥—É—î —ñ—Å—Ç–æ—Ä—ñ—é –∑—ñ —Å—Ç—É–¥–µ–Ω—Ç—Å—å–∫–æ–≥–æ –∂–∏—Ç—Ç—è", "–í–∏–∫–ª–∞–¥–∞—á –ø–ª—É—Ç–∞—î—Ç—å—Å—è —É –º–∞—Ç–µ—Ä—ñ–∞–ª—ñ", "–í–∏–∫–ª–∞–¥–∞—á –∑–∞–±—É–≤–∞—î, —â–æ –∫–∞–∑–∞–≤",
                "–•—Ç–æ—Å—å —â–æ—Å—å —Ä–æ–Ω—è—î", "–í–∏–∫–ª–∞–¥–∞—á –ø–∏—Ç–∞—î, —Ö—Ç–æ –Ω–µ –∑—Ä–æ–±–∏–≤ –¥–æ–º–∞—à–∫—É. –∞–±–æ –Ω–∞–≤–ø–∞–∫–∏?", "–í–∏–∫–ª–∞–¥–∞—á —Ä–∞–ø—Ç–æ–≤–æ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç—å –Ω–∞ —ñ–Ω—à—É —Ç–µ–º—É",
                "–í–∏–∫–ª–∞–¥–∞—á –∑–∞–¥–∞—î —Ä–∏—Ç–æ—Ä–∏—á–Ω–µ –ø–∏—Ç–∞–Ω–Ω—è", "–í–∏–∫–ª–∞–¥–∞—á –∫–∞–∂–µ \"–Ω–∞ —Ü—å–æ–º—É –º–∏ –∑–∞–∫—ñ–Ω—á–∏–º–æ —Ä–∞–Ω—ñ—à–µ\"", "–í–∏–∫–ª–∞–¥–∞—á –∫–∞–∂–µ \"—Ü–µ –±—É–¥–µ –ª–µ–≥–∫–µ –ø–∏—Ç–∞–Ω–Ω—è –Ω–∞ –µ–∫–∑–∞–º–µ–Ω—ñ",
                "–•—Ç–æ—Å—å —Å–º—ñ—î—Ç—å—Å—è, –∞–ª–µ –Ω–µ —á–µ—Ä–µ–∑ –≤–∏–∫–ª–∞–¥–∞—á–∞", "–í–∏–∫–ª–∞–¥–∞—á –∑–∞–±—É–≤–∞—î —Å–ª–æ–≤–æ —ñ —à—É–∫–∞—î –π–æ–≥–æ", "–í–∏–∫–ª–∞–¥–∞—á –≤–∏–ø–∞–¥–∫–æ–≤–æ –∫–∞–∂–µ —â–æ—Å—å —ñ–Ω—à–æ—é –º–æ–≤–æ—é",
                "–í–∏–∫–ª–∞–¥–∞—á —Å—Ç–∞–≤–∏—Ç—å –Ω–µ—Å–ø–æ–¥—ñ–≤–∞–Ω–µ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è", "–•—Ç–æ—Å—å –≤–∏—Ö–æ–¥–∏—Ç—å —ñ–∑ –∑–∞–Ω—è—Ç—Ç—è —Ä–∞–Ω—ñ—à–µ", "–í–∏–∫–ª–∞–¥–∞—á –∑–º—ñ–Ω—é—î —Ç–µ–º—É –ø–æ—Å–µ—Ä–µ–¥ —Ä–µ—á–µ–Ω–Ω—è",
                "–í–∏–∫–ª–∞–¥–∞—á –≥–æ–≤–æ—Ä–∏—Ç—å —Ñ—Ä–∞–∑—É \"—è–∫–±–∏ —É –Ω–∞—Å –±—É–ª–æ –±—ñ–ª—å—à–µ —á–∞—Å—É...", "–•—Ç–æ—Å—å –≥–æ–ª–æ—Å–Ω–æ –∫–∞—à–ª—è—î –∞–±–æ —á—Ö–∞—î", "–í–∏–∫–ª–∞–¥–∞—á —Ä–æ–±–∏—Ç—å –¥–æ–≤–≥—É –ø–∞—É–∑—É",
                "–•—Ç–æ—Å—å —Å—Ç–∞–≤–∏—Ç—å –¥—É–∂–µ –Ω–µ—Å–ø–æ–¥—ñ–≤–∞–Ω–µ –∞–±–æ –¥–∏–≤–Ω–µ –ø–∏—Ç–∞–Ω–Ω—è"
        );
    }
}